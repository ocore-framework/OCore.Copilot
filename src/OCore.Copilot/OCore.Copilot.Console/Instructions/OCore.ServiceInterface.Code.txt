Services in OCore as defined as follows using C#. Here is example code for the abstraction/interface-part:

```csharp
using OCore.Services;

namespace AppName.Services; 

/// <summary>
/// This is a description of the service.
/// </summary>
[Service("ServiceName")]
public interface IServiceName : IService
{
    /// <summary>
    /// This is a description of the operation
    /// </summary>
	Task<T> Operation(string parameter1, int parameter2);
}
```

This is the implementation-part:

```csharp
/// <inhericdoc />
public class ServiceName : Service, IServiceName
{
	/// <inhericdoc />
	public async Task<T> Operation(string parameter1, int parameter2) 
	{
		// Implement method as expected from description in the requirements
	}
}
```

Parameters and operation-names are just examples, these need to follow
the requirements.

Ids should default to being strings, not Guids. But they can be Guids stored as strings.

Services should by default not store data, they should get it from DataEntities.

If you need to talk to other services, inject the IOtherService-interface with constructor injection.

Remember to add the [Service("ServiceName")] over the interfaces that implement `IService`! THIS IS IMPORTANT!

Always add XML-comments to public interfaces and methods!

Always prefer `namespace NamespaceName;` over opening brackets and indentation!